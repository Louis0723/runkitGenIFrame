{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","_Users_louis_github_init_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_louis_github_init_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_louis_github_init_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","code","_this2","editor2","editor","monaco","create","document","getElementById","language","theme","onDidChangeModelContent","_","getValue","base64code","encodeURIComponent","Buffer","from","toString","iframe","concat","setValue","setState","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_5__","id","key","style","width","height","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_default","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gLAIMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,IAHSR,mFAOC,IAAAS,EAAAN,KAClB,IAAKA,KAAKO,QAAS,CACjB,IAAIC,EAASC,IAAcC,OAAOC,SAASC,eAAe,UAAW,CACnEC,SAAU,aACVC,MAAO,YAETN,EAAOO,wBACLC,WAAW,WACT,IAAIX,EAAOG,EAAOS,WACdC,EAAaC,mBAAmBC,EAAOC,KAAKhB,GAAMiB,SAAS,WAC3DC,EAAM,kDAAAC,OAAqDN,EAArD,oDACVZ,EAAKC,QAAQkB,SAASF,GACtBjB,EAAKoB,SAAS,CAAErB,KAAMkB,KACrB,MAGLvB,KAAKO,QAAUE,IAAcC,OAAOC,SAASC,eAAe,WAAY,CACtEC,SAAU,OACVC,MAAO,YAGTd,KAAKO,QAAQQ,wBACXC,WAAW,WACT,IAAIX,EAAOC,EAAKC,QAAQU,WACxBX,EAAKoB,SAAS,CAAErB,UAChB,wCAON,OACEsB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SAASC,IAAI,SACnBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAElCR,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUC,IAAI,UACpBC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAElCR,EAAAC,EAAAC,cAAA,OAAKO,wBAAyB,CAAEC,OAAQrC,KAAKI,MAAMC,gBAhDzCiC,IAAMC,WAsDT5C,qLC9CK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAnB,EAAAC,cAAClC,EAAA,EAAD,MAASgB,SAASC,eAAe,SD2H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0fe48103.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport * as monaco from 'monaco-editor';\nimport * as _ from 'lodash'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: ''\n    }\n  }\n\n  componentDidMount() {\n    if (!this.editor2) {\n      let editor = monaco.editor.create(document.getElementById(\"editor\"), {\n        language: \"javascript\",\n        theme: \"vs-dark\"\n      });\n      editor.onDidChangeModelContent(\n        _.debounce(() => {\n          let code = editor.getValue()\n          let base64code = encodeURIComponent(Buffer.from(code).toString('base64'))\n          let iframe = `<iframe src=\"https://runkit.com/e?base64source=${base64code}\" frameborder=\"0\" style=\"width: 100%;\"></iframe>`;\n          this.editor2.setValue(iframe);\n          this.setState({ code: iframe })\n        }, 2000)\n      )\n\n      this.editor2 = monaco.editor.create(document.getElementById(\"editor2\"), {\n        language: \"html\",\n        theme: \"vs-dark\",\n      });\n\n      this.editor2.onDidChangeModelContent(\n        _.debounce(() => {\n          let code = this.editor2.getValue()\n          this.setState({ code })\n        },2000)\n      )\n\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div id=\"editor\" key=\"editor\"\n          style={{ width: '100%', height: '200px' }}\n        />\n        <div id=\"editor2\" key=\"editor2\"\n          style={{ width: '100%', height: '100px' }}\n        />\n        <div dangerouslySetInnerHTML={{ __html: this.state.code }} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}